{
	"info": {
		"_postman_id": "6a6fb6d5-90d4-4fc3-93e5-aff66a9505f0",
		"name": "New to Postman",
		"description": "YouTube - New to Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Google's Address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response includes results\", function() {\r",
							"    pm.expect(pm.response.json()).to.include.keys(\"results\");\r",
							"});\r",
							"\r",
							"let firstResponse = pm.response.json().results[0];\r",
							"let lat = firstResponse.geometry.location.lat;\r",
							"let lng = firstResponse.geometry.location.lng;\r",
							"\r",
							"pm.environment.set('lat', lat);\r",
							"pm.environment.set('lng', lng);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://maps.googleapis.com/maps/api/geocode/json?address=1600+Amphitheatre+Parkway,+Mountain+View,+CA&key={{googleMapsGeocodingApiKey}}",
					"protocol": "https",
					"host": [
						"maps",
						"googleapis",
						"com"
					],
					"path": [
						"maps",
						"api",
						"geocode",
						"json"
					],
					"query": [
						{
							"key": "address",
							"value": "1600+Amphitheatre+Parkway,+Mountain+View,+CA"
						},
						{
							"key": "key",
							"value": "{{googleMapsGeocodingApiKey}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "My Address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response includes results\", function() {\r",
							"    pm.expect(pm.response.json()).to.include.keys(\"results\");\r",
							"});\r",
							"\r",
							"let firstResponse = pm.response.json().results[0];\r",
							"let lat = firstResponse.geometry.location.lat;\r",
							"let lng = firstResponse.geometry.location.lng;\r",
							"\r",
							"pm.environment.set('lat', lat);\r",
							"pm.environment.set('lng', lng);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://maps.googleapis.com/maps/api/geocode/json?address=2906+Courtside+Lane,+Plano,+TX&key={{googleMapsGeocodingApiKey}}",
					"protocol": "https",
					"host": [
						"maps",
						"googleapis",
						"com"
					],
					"path": [
						"maps",
						"api",
						"geocode",
						"json"
					],
					"query": [
						{
							"key": "address",
							"value": "2906+Courtside+Lane,+Plano,+TX"
						},
						{
							"key": "key",
							"value": "{{googleMapsGeocodingApiKey}}"
						}
					]
				},
				"description": "Big Dog"
			},
			"response": []
		},
		{
			"name": "Places",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let response = pm.response.json();\r",
							"let choices = [];\r",
							"\r",
							"for (let i = 0; i < response.results.length; i++) {\r",
							"\r",
							"    let establishment = response.results[i];\r",
							"\r",
							"    if (establishment.opening_hours && establishment.rating >= 4.0) {\r",
							"        //choices.push({\r",
							"        //    \"name\": establishment.name,\r",
							"        //    \"rating\": establishment.rating,\r",
							"        //    \"vicinity\": establishment.vicinity\r",
							"        //});\r",
							"        let element = {\r",
							"            \"name\": establishment.name,\r",
							"            \"rating\": establishment.rating,\r",
							"            \"vicinity\": establishment.vicinity\r",
							"        };\r",
							"\r",
							"        choices.push(element);\r",
							"    }\r",
							"}\r",
							"\r",
							"pm.environment.set(\"choices\", JSON.stringify(choices));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://maps.googleapis.com/maps/api/place/nearbysearch/json?location={{lat}},{{lng}}&radius=500&types=food&name=harbour&key={{googlePlacesApiKey}}",
					"protocol": "https",
					"host": [
						"maps",
						"googleapis",
						"com"
					],
					"path": [
						"maps",
						"api",
						"place",
						"nearbysearch",
						"json"
					],
					"query": [
						{
							"key": "location",
							"value": "{{lat}},{{lng}}"
						},
						{
							"key": "radius",
							"value": "500"
						},
						{
							"key": "types",
							"value": "food"
						},
						{
							"key": "name",
							"value": "harbour"
						},
						{
							"key": "key",
							"value": "{{googlePlacesApiKey}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Sydney Address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response includes results\", function() {\r",
							"    pm.expect(pm.response.json()).to.include.keys(\"results\");\r",
							"});\r",
							"\r",
							"let firstResponse = pm.response.json().results[0];\r",
							"let lat = firstResponse.geometry.location.lat;\r",
							"let lng = firstResponse.geometry.location.lng;\r",
							"\r",
							"pm.environment.set('lat', lat);\r",
							"pm.environment.set('lng', lng);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://maps.googleapis.com/maps/api/geocode/json?address=48A+Pirrama+Road,+Sydney,+New+South+Wales,+2009+Pyrmont+Sydney+Australia&key={{googleMapsGeocodingApiKey}}",
					"protocol": "https",
					"host": [
						"maps",
						"googleapis",
						"com"
					],
					"path": [
						"maps",
						"api",
						"geocode",
						"json"
					],
					"query": [
						{
							"key": "address",
							"value": "48A+Pirrama+Road,+Sydney,+New+South+Wales,+2009+Pyrmont+Sydney+Australia"
						},
						{
							"key": "key",
							"value": "{{googleMapsGeocodingApiKey}}"
						}
					]
				},
				"description": "Sydney Address"
			},
			"response": []
		},
		{
			"name": "Cookies - Baeldung - spring-mvc-xml",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/spring-mvc-xml/sample.html",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"spring-mvc-xml",
						"sample.html"
					]
				},
				"description": "Proof Cookies - Baeldung - spring-mvc-xml"
			},
			"response": []
		},
		{
			"name": "springBootJwtAuthenticate_1",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": "Content-Type",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"foo\",\r\n    \"password\" : \"foo\"\r\n}"
				},
				"url": {
					"raw": "http://localhost:8080/authenticate",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"authenticate"
					]
				},
				"description": "Spring Boot + Spring Security + JWT from scratch - Java Brains -- https://www.youtube.com/watch?v=X80nJ5T7YpE&list=PLqq-6Pq4lTTYTEooakHchTGglSvkZAjnE&index=13"
			},
			"response": []
		},
		{
			"name": "springBootJwtHelloWithBearerToken_2",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": "Content-Type",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJmb28iLCJleHAiOjE2MjgyMjMzODYsImlhdCI6MTYyODE4NzM4Nn0.wFOUiZ1oH-lpSCb65sF6ZoixotZXYM4BN1OJzYRtzII",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8080/hello",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"hello"
					]
				},
				"description": "Spring Boot + Spring Security + JWT from scratch - Java Brains -- https://www.youtube.com/watch?v=X80nJ5T7YpE&list=PLqq-6Pq4lTTYTEooakHchTGglSvkZAjnE&index=13"
			},
			"response": []
		},
		{
			"name": "springBootJwtHelloWrongBearerJwt_3",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"description": "Content-Type",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer jksljflWRONGokisda",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:8080/hello",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"hello"
					]
				},
				"description": "Spring Boot + Spring Security + JWT from scratch - Java Brains -- https://www.youtube.com/watch?v=X80nJ5T7YpE&list=PLqq-6Pq4lTTYTEooakHchTGglSvkZAjnE&index=13"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Response includes results\", function() {",
					"    pm.expect(pm.response.json()).to.include.keys(\"results\");",
					"});"
				]
			}
		}
	]
}